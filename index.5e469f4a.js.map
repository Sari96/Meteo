{"mappings":"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","sources":["scripts.js"],"sourcesContent":["let dailyValues, hourlyValues;\nlet url;\nlet dateIndex;\n\nconst loadCity = (lat, lng) => {\n  url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lng}&`;\n  fetch(`http://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lng}&appid=ca0bc81789a77b485742ed7b77c9a1b9&limit=0`)\n  .then((response) => response.json())\n  .then((data) => {\n    $(\"h1\").append(data[0].name);\n    loadDailyData(lat, lng);\n  });\n}\n\nconst getWeatherImg = (code, is_day) => {\n  var img;\n  if (code == 0)\n    img = \"clear\";\n  else if ([1, 2, 3].includes(code))\n    img = \"partly_cloudly\";\n  else if ([45, 48].includes(code))\n    img = \"foggy\";\n  else if ([51, 53, 55, 56, 57, 61, 66, 80].includes(code))\n    img = \"drizzle\";\n  else if ([63, 65, 67, 81, 82].includes(code))\n    img = \"rain\";\n  else if ([71, 73, 75, 77, 85, 86].includes(code))\n    img = \"snow\";\n  else if ([95,96, 99].includes(code))\n    img = \"thunder\";\n\n  return img = \"resources/\" + img + \"_\" + is_day + \".svg\";\n}\n\nconst loadDailyData = (lat, lng) => {\n  const dailyUrl = url + 'timezone=auto&daily=temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum,weathercode,sunrise,sunset';\n  console.log(dailyUrl);\n  fetch(dailyUrl)\n  .then((response) => response.json())\n  .then((data) => {\n    dailyValues = data;\n    data.daily.time.forEach((item, index) => {\n      const date = new Date(item);\n      const temp = Math.round((data.daily.temperature_2m_max[index] + data.daily.temperature_2m_min[index]) / 2);\n      const svg = getWeatherImg(data.daily.weathercode[index], 1);\n      console.log(svg);\n      $(\"#dateBar\").append(`\n      <label>\n        <input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio-${date.getDate()}\" autocomplete=\"off\" onclick=\"setWeatherDate(${index})\">\n        <div class=\"card d-flex flex-column justify-content-between\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">${temp} °C</h5>\n            <img src=\"${svg}\"/>\n            <h5 class=\"card-title day\">${date.toLocaleDateString('it-IT', {weekday: 'short'})}</h5>\n          </div>\n        </div>\n\n        <!-- <img src=\"...\" class=\"card-img-top\" alt=\"...\">\n            <h5 class=\"card-title\">Card title</h5>\n            <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n            <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n          </div>\n        </div>-->\n      </label>`);\n    });\n    loadHourlyData(lat, lng);\n  });\n}\n\nconst loadHourlyData = () => {\n  const hourlyUrl = url + 'hourly=temperature_2m,relativehumidity_2m,apparent_temperature,windspeed_10m,winddirection_10m,precipitation,precipitation_probability,weathercode,is_day';\n  console.log(hourlyUrl);\n  fetch(hourlyUrl)\n  .then((response) => response.json())\n  .then((data) => {\n    hourlyValues = data;\n    setWeatherDate(0);\n  });\n}\n\nconst setWeatherDate = (dateIdx) => {\n  console.log(`Called setWeatherDate(${dateIdx})`);\n  $(\"#dateBar .card.selected\").removeClass(\"selected\");\n  $(\"#dateBar .card\").eq(dateIdx).addClass(\"selected\");\n  dateIndex = dateIdx;\n  const now = new Date();\n  let date = new Date(dailyValues.daily.time[dateIdx]);\n  // YYYY-MM-DD format\n  const dateString = date.toLocaleDateString('it-IT', {year: \"numeric\"}) + \"-\" + date.toLocaleDateString('it-IT', {month: \"2-digit\"}) + \"-\" + date.toLocaleDateString('it-IT', {day: \"2-digit\"});\n  $(\"#sunrise\").html(`${new Date(dailyValues.daily.sunrise[dateIndex]).toLocaleTimeString('it-IT', {hour: '2-digit', minute: '2-digit'})}`);\n  $(\"#sunset\").html(`${new Date(dailyValues.daily.sunset[dateIndex]).toLocaleTimeString('it-IT', {hour: '2-digit', minute: '2-digit'})}`);\n  $(\"#temp_min\").html(`${dailyValues.daily.temperature_2m_min[dateIndex]} °C`);\n  $(\"#temp_max\").html(`${dailyValues.daily.temperature_2m_max[dateIndex]} °C`);\n\n  let htmlHourlyWeather = '';\n\n  hourlyValues.hourly.time.forEach((time, index) => {\n    date = new Date(time);\n    if (time.startsWith(dateString)) {\n      const svg = getWeatherImg(hourlyValues.hourly.weathercode[index], hourlyValues.hourly.is_day[index]);\n      minIdx = hourlyValues.hourly.time.findIndex(time => new Date(time) >= now);\n      if (dateIdx == 0 && index == minIdx || dateIdx != 0 && date.getHours() == 10) {\n        $(\"#main-weather\").parent().css({\"background-image\": \"url(resources/background_\" + hourlyValues.hourly.is_day[index] + \".png)\"});\n        $(\"#main-weather\").html(`\n            <div class=\"col-5 text-center d-flex flex-column justify-content-evenly\">\n              <img src=\"${svg}\">\n              <h5 class=\"card-title\">${date.toLocaleTimeString('it-IT', {hour: '2-digit', minute:'2-digit'})}</h5>\n            </div>\n            <div class=\"col-7 d-flex flex-column justify-content-evenly\">\n              <h5 class=\"card-title fs-1\">${hourlyValues.hourly.temperature_2m[index]} °C</h5>\n              <p class=\"card-text fs-3\">${date.toLocaleDateString('it-IT', {day: 'numeric', month: \"long\", year: \"numeric\"})}</p>\n              <div class=\"row\">\n                <div class=\"col-2\">\n                  <img src=\"resources/humidity.svg\" class=\"d-block\">\n                </div>\n                <div class=\"col-4\">\n                  <h5 class=\"card-title\">Umidità</h5>\n                  <p class=\"card-text\">${hourlyValues.hourly.relativehumidity_2m[index]} %</p>\n                </div>\n                <div class=\"col-2\">\n                  <img src=\"resources/wind.svg\" class=\"d-block\">\n                </div>\n                <div class=\"col-4\">\n                  <h5 class=\"card-title\">Vento</h5>\n                  <p class=\"card-text\">${hourlyValues.hourly.windspeed_10m[index]} km/h</p>\n                </div>\n              </div>\n            </div>\n            `\n        );\n      }\n      htmlHourlyWeather = htmlHourlyWeather + `\n        <div class=\"d-flex my-4 flex-column justify-content-between\">\n          <p class=\"card-text fs-3\">${date.toLocaleTimeString('it-IT', {hour: '2-digit', minute:'2-digit'})}</p>\n          <img src=\"${svg}\" class=\"d-block\">\n          <p class=\"card-text fs-3\">${hourlyValues.hourly.temperature_2m[index]} °C</p>\n        </div>\n      `;\n    }\n  });\n\n  $(\"#hourlyWeather\").html(htmlHourlyWeather);\n}\n\n$(document).ready(() => {\n  navigator.geolocation.getCurrentPosition((position) => {\n    console.log(position)\n    let lat = position.coords.latitude;\n    let lng = position.coords.longitude;\n    loadCity(lat, lng);\n  });\n});"],"names":[],"version":3,"file":"index.5e469f4a.js.map","sourceRoot":"/__parcel_source_root/"}