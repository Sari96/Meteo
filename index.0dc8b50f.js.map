{"mappings":"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","sources":["<anon>","scripts.js"],"sourcesContent":["let dailyValues, hourlyValues;\nlet url;\nlet dateIndex;\nconst loadCity = (lat, lng)=>{\n    url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lng}&`;\n    fetch(`https://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lng}&appid=ca0bc81789a77b485742ed7b77c9a1b9&limit=0`).then((response)=>response.json()).then((data)=>{\n        $(\"h1\").append(data[0].name);\n        loadDailyData(lat, lng);\n    });\n};\nconst getWeatherImg = (code, is_day)=>{\n    var img;\n    if (code == 0) img = \"clear\";\n    else if ([\n        1,\n        2,\n        3\n    ].includes(code)) img = \"partly_cloudly\";\n    else if ([\n        45,\n        48\n    ].includes(code)) img = \"foggy\";\n    else if ([\n        51,\n        53,\n        55,\n        56,\n        57,\n        61,\n        66,\n        80\n    ].includes(code)) img = \"drizzle\";\n    else if ([\n        63,\n        65,\n        67,\n        81,\n        82\n    ].includes(code)) img = \"rain\";\n    else if ([\n        71,\n        73,\n        75,\n        77,\n        85,\n        86\n    ].includes(code)) img = \"snow\";\n    else if ([\n        95,\n        96,\n        99\n    ].includes(code)) img = \"thunder\";\n    return img = \"resources/\" + img + \"_\" + is_day + \".svg\";\n};\nconst loadDailyData = (lat, lng)=>{\n    const dailyUrl = url + \"timezone=auto&daily=temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum,weathercode,sunrise,sunset\";\n    console.log(dailyUrl);\n    fetch(dailyUrl).then((response)=>response.json()).then((data)=>{\n        dailyValues = data;\n        data.daily.time.forEach((item, index)=>{\n            const date = new Date(item);\n            const temp = Math.round((data.daily.temperature_2m_max[index] + data.daily.temperature_2m_min[index]) / 2);\n            const svg = getWeatherImg(data.daily.weathercode[index], 1);\n            console.log(svg);\n            $(\"#dateBar\").append(`\n      <label>\n        <input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio-${date.getDate()}\" autocomplete=\"off\" onclick=\"setWeatherDate(${index})\">\n        <div class=\"card d-flex flex-column justify-content-between\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">${temp} °C</h5>\n            <img src=\"${svg}\"/>\n            <h5 class=\"card-title day\">${date.toLocaleDateString(\"it-IT\", {\n                weekday: \"short\"\n            })}</h5>\n          </div>\n        </div>\n\n        <!-- <img src=\"...\" class=\"card-img-top\" alt=\"...\">\n            <h5 class=\"card-title\">Card title</h5>\n            <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n            <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n          </div>\n        </div>-->\n      </label>`);\n        });\n        loadHourlyData(lat, lng);\n    });\n};\nconst loadHourlyData = ()=>{\n    const hourlyUrl = url + \"hourly=temperature_2m,relativehumidity_2m,apparent_temperature,windspeed_10m,winddirection_10m,precipitation,precipitation_probability,weathercode,is_day\";\n    console.log(hourlyUrl);\n    fetch(hourlyUrl).then((response)=>response.json()).then((data)=>{\n        hourlyValues = data;\n        setWeatherDate(0);\n    });\n};\nconst setWeatherDate = (dateIdx)=>{\n    console.log(`Called setWeatherDate(${dateIdx})`);\n    $(\"#dateBar .card.selected\").removeClass(\"selected\");\n    $(\"#dateBar .card\").eq(dateIdx).addClass(\"selected\");\n    dateIndex = dateIdx;\n    const now = new Date();\n    let date = new Date(dailyValues.daily.time[dateIdx]);\n    // YYYY-MM-DD format\n    const dateString = date.toLocaleDateString(\"it-IT\", {\n        year: \"numeric\"\n    }) + \"-\" + date.toLocaleDateString(\"it-IT\", {\n        month: \"2-digit\"\n    }) + \"-\" + date.toLocaleDateString(\"it-IT\", {\n        day: \"2-digit\"\n    });\n    $(\"#sunrise\").html(`${new Date(dailyValues.daily.sunrise[dateIndex]).toLocaleTimeString(\"it-IT\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n    })}`);\n    $(\"#sunset\").html(`${new Date(dailyValues.daily.sunset[dateIndex]).toLocaleTimeString(\"it-IT\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n    })}`);\n    $(\"#temp_min\").html(`${dailyValues.daily.temperature_2m_min[dateIndex]} °C`);\n    $(\"#temp_max\").html(`${dailyValues.daily.temperature_2m_max[dateIndex]} °C`);\n    let htmlHourlyWeather = \"\";\n    hourlyValues.hourly.time.forEach((time, index)=>{\n        date = new Date(time);\n        if (time.startsWith(dateString)) {\n            const svg = getWeatherImg(hourlyValues.hourly.weathercode[index], hourlyValues.hourly.is_day[index]);\n            minIdx = hourlyValues.hourly.time.findIndex((time)=>new Date(time) >= now);\n            if (dateIdx == 0 && index == minIdx || dateIdx != 0 && date.getHours() == 10) {\n                $(\"#main-weather\").parent().css({\n                    \"background-image\": \"url(resources/background_\" + hourlyValues.hourly.is_day[index] + \".png)\"\n                });\n                $(\"#main-weather\").html(`\n            <div class=\"col-5 text-center d-flex flex-column justify-content-evenly\">\n              <img src=\"${svg}\">\n              <h5 class=\"card-title\">${date.toLocaleTimeString(\"it-IT\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\"\n                })}</h5>\n            </div>\n            <div class=\"col-7 d-flex flex-column justify-content-evenly\">\n              <h5 class=\"card-title fs-1\">${hourlyValues.hourly.temperature_2m[index]} °C</h5>\n              <p class=\"card-text fs-3\">${date.toLocaleDateString(\"it-IT\", {\n                    day: \"numeric\",\n                    month: \"long\",\n                    year: \"numeric\"\n                })}</p>\n              <div class=\"row\">\n                <div class=\"col-2\">\n                  <img src=\"resources/humidity.svg\" class=\"d-block\">\n                </div>\n                <div class=\"col-4\">\n                  <h5 class=\"card-title\">Umidità</h5>\n                  <p class=\"card-text\">${hourlyValues.hourly.relativehumidity_2m[index]} %</p>\n                </div>\n                <div class=\"col-2\">\n                  <img src=\"resources/wind.svg\" class=\"d-block\">\n                </div>\n                <div class=\"col-4\">\n                  <h5 class=\"card-title\">Vento</h5>\n                  <p class=\"card-text\">${hourlyValues.hourly.windspeed_10m[index]} km/h</p>\n                </div>\n              </div>\n            </div>\n            `);\n            }\n            htmlHourlyWeather = htmlHourlyWeather + `\n        <div class=\"d-flex my-4 flex-column justify-content-between\">\n          <p class=\"card-text fs-3\">${date.toLocaleTimeString(\"it-IT\", {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            })}</p>\n          <img src=\"${svg}\" class=\"d-block\">\n          <p class=\"card-text fs-3\">${hourlyValues.hourly.temperature_2m[index]} °C</p>\n        </div>\n      `;\n        }\n    });\n    $(\"#hourlyWeather\").html(htmlHourlyWeather);\n};\n$(document).ready(()=>{\n    navigator.geolocation.getCurrentPosition((position)=>{\n        console.log(position);\n        let lat = position.coords.latitude;\n        let lng = position.coords.longitude;\n        loadCity(lat, lng);\n    });\n});\n\n//# sourceMappingURL=index.0dc8b50f.js.map\n","let dailyValues, hourlyValues;\nlet url;\nlet dateIndex;\n\nconst loadCity = (lat, lng) => {\n  url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lng}&`;\n  fetch(`https://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lng}&appid=ca0bc81789a77b485742ed7b77c9a1b9&limit=0`)\n  .then((response) => response.json())\n  .then((data) => {\n    $(\"h1\").append(data[0].name);\n    loadDailyData(lat, lng);\n  });\n}\n\nconst getWeatherImg = (code, is_day) => {\n  var img;\n  if (code == 0)\n    img = \"clear\";\n  else if ([1, 2, 3].includes(code))\n    img = \"partly_cloudly\";\n  else if ([45, 48].includes(code))\n    img = \"foggy\";\n  else if ([51, 53, 55, 56, 57, 61, 66, 80].includes(code))\n    img = \"drizzle\";\n  else if ([63, 65, 67, 81, 82].includes(code))\n    img = \"rain\";\n  else if ([71, 73, 75, 77, 85, 86].includes(code))\n    img = \"snow\";\n  else if ([95,96, 99].includes(code))\n    img = \"thunder\";\n\n  return img = \"resources/\" + img + \"_\" + is_day + \".svg\";\n}\n\nconst loadDailyData = (lat, lng) => {\n  const dailyUrl = url + 'timezone=auto&daily=temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum,weathercode,sunrise,sunset';\n  console.log(dailyUrl);\n  fetch(dailyUrl)\n  .then((response) => response.json())\n  .then((data) => {\n    dailyValues = data;\n    data.daily.time.forEach((item, index) => {\n      const date = new Date(item);\n      const temp = Math.round((data.daily.temperature_2m_max[index] + data.daily.temperature_2m_min[index]) / 2);\n      const svg = getWeatherImg(data.daily.weathercode[index], 1);\n      console.log(svg);\n      $(\"#dateBar\").append(`\n      <label>\n        <input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio-${date.getDate()}\" autocomplete=\"off\" onclick=\"setWeatherDate(${index})\">\n        <div class=\"card d-flex flex-column justify-content-between\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">${temp} °C</h5>\n            <img src=\"${svg}\"/>\n            <h5 class=\"card-title day\">${date.toLocaleDateString('it-IT', {weekday: 'short'})}</h5>\n          </div>\n        </div>\n\n        <!-- <img src=\"...\" class=\"card-img-top\" alt=\"...\">\n            <h5 class=\"card-title\">Card title</h5>\n            <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n            <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n          </div>\n        </div>-->\n      </label>`);\n    });\n    loadHourlyData(lat, lng);\n  });\n}\n\nconst loadHourlyData = () => {\n  const hourlyUrl = url + 'hourly=temperature_2m,relativehumidity_2m,apparent_temperature,windspeed_10m,winddirection_10m,precipitation,precipitation_probability,weathercode,is_day';\n  console.log(hourlyUrl);\n  fetch(hourlyUrl)\n  .then((response) => response.json())\n  .then((data) => {\n    hourlyValues = data;\n    setWeatherDate(0);\n  });\n}\n\nconst setWeatherDate = (dateIdx) => {\n  console.log(`Called setWeatherDate(${dateIdx})`);\n  $(\"#dateBar .card.selected\").removeClass(\"selected\");\n  $(\"#dateBar .card\").eq(dateIdx).addClass(\"selected\");\n  dateIndex = dateIdx;\n  const now = new Date();\n  let date = new Date(dailyValues.daily.time[dateIdx]);\n  // YYYY-MM-DD format\n  const dateString = date.toLocaleDateString('it-IT', {year: \"numeric\"}) + \"-\" + date.toLocaleDateString('it-IT', {month: \"2-digit\"}) + \"-\" + date.toLocaleDateString('it-IT', {day: \"2-digit\"});\n  $(\"#sunrise\").html(`${new Date(dailyValues.daily.sunrise[dateIndex]).toLocaleTimeString('it-IT', {hour: '2-digit', minute: '2-digit'})}`);\n  $(\"#sunset\").html(`${new Date(dailyValues.daily.sunset[dateIndex]).toLocaleTimeString('it-IT', {hour: '2-digit', minute: '2-digit'})}`);\n  $(\"#temp_min\").html(`${dailyValues.daily.temperature_2m_min[dateIndex]} °C`);\n  $(\"#temp_max\").html(`${dailyValues.daily.temperature_2m_max[dateIndex]} °C`);\n\n  let htmlHourlyWeather = '';\n\n  hourlyValues.hourly.time.forEach((time, index) => {\n    date = new Date(time);\n    if (time.startsWith(dateString)) {\n      const svg = getWeatherImg(hourlyValues.hourly.weathercode[index], hourlyValues.hourly.is_day[index]);\n      minIdx = hourlyValues.hourly.time.findIndex(time => new Date(time) >= now);\n      if (dateIdx == 0 && index == minIdx || dateIdx != 0 && date.getHours() == 10) {\n        $(\"#main-weather\").parent().css({\"background-image\": \"url(resources/background_\" + hourlyValues.hourly.is_day[index] + \".png)\"});\n        $(\"#main-weather\").html(`\n            <div class=\"col-5 text-center d-flex flex-column justify-content-evenly\">\n              <img src=\"${svg}\">\n              <h5 class=\"card-title\">${date.toLocaleTimeString('it-IT', {hour: '2-digit', minute:'2-digit'})}</h5>\n            </div>\n            <div class=\"col-7 d-flex flex-column justify-content-evenly\">\n              <h5 class=\"card-title fs-1\">${hourlyValues.hourly.temperature_2m[index]} °C</h5>\n              <p class=\"card-text fs-3\">${date.toLocaleDateString('it-IT', {day: 'numeric', month: \"long\", year: \"numeric\"})}</p>\n              <div class=\"row\">\n                <div class=\"col-2\">\n                  <img src=\"resources/humidity.svg\" class=\"d-block\">\n                </div>\n                <div class=\"col-4\">\n                  <h5 class=\"card-title\">Umidità</h5>\n                  <p class=\"card-text\">${hourlyValues.hourly.relativehumidity_2m[index]} %</p>\n                </div>\n                <div class=\"col-2\">\n                  <img src=\"resources/wind.svg\" class=\"d-block\">\n                </div>\n                <div class=\"col-4\">\n                  <h5 class=\"card-title\">Vento</h5>\n                  <p class=\"card-text\">${hourlyValues.hourly.windspeed_10m[index]} km/h</p>\n                </div>\n              </div>\n            </div>\n            `\n        );\n      }\n      htmlHourlyWeather = htmlHourlyWeather + `\n        <div class=\"d-flex my-4 flex-column justify-content-between\">\n          <p class=\"card-text fs-3\">${date.toLocaleTimeString('it-IT', {hour: '2-digit', minute:'2-digit'})}</p>\n          <img src=\"${svg}\" class=\"d-block\">\n          <p class=\"card-text fs-3\">${hourlyValues.hourly.temperature_2m[index]} °C</p>\n        </div>\n      `;\n    }\n  });\n\n  $(\"#hourlyWeather\").html(htmlHourlyWeather);\n}\n\n$(document).ready(() => {\n  navigator.geolocation.getCurrentPosition((position) => {\n    console.log(position)\n    let lat = position.coords.latitude;\n    let lng = position.coords.longitude;\n    loadCity(lat, lng);\n  });\n});"],"names":["dailyValues","hourlyValues","url","dateIndex","loadCity","lat","lng","fetch","then","response","json","data","$","append","name","loadDailyData","getWeatherImg","code","is_day","img","includes","dailyUrl","console","log","daily","time","forEach","item","index","date","Date","temp","Math","round","temperature_2m_max","temperature_2m_min","svg","weathercode","getDate","toLocaleDateString","weekday","loadHourlyData","hourlyUrl","setWeatherDate","dateIdx","removeClass","eq","addClass","now","dateString","year","month","day","html","sunrise","toLocaleTimeString","hour","minute","sunset","htmlHourlyWeather","hourly","startsWith","minIdx","findIndex","getHours","parent","css","temperature_2m","relativehumidity_2m","windspeed_10m","document","ready","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude"],"version":3,"file":"index.0dc8b50f.js.map"}