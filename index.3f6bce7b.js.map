{"mappings":"AACA,MAAMA,QAAQ,GACd,IAAIC,OAAQC,iBAAkBC,YAAaC,YAAaC,eACpDC,eAEJ,MAAMC,SAAW,CAACC,EAAKC,KACrB,MAAMC,EAAM,kEAAkEF,SAAWC,2CACzFE,QAAQC,IAAIF,GACZG,MAAMH,GACLI,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,IAEL,IAAIC,EADJjB,OAASgB,EAETA,EAAKE,KAAKC,SAAQ,CAACC,EAAMC,KACvB,MAAMC,EAAW,IAAIC,KAAKH,EAAKI,QACnBC,MAARR,GAAqBA,EAAKS,WAAaJ,EAASI,YAClDT,EAAOK,EACPlB,eAAeuB,OAAO,sEAAsEV,EAAKS,yDAAyDL,wEACjGJ,EAAKS,cAAcT,EAAKW,eAAe,QAAS,CAACC,MAAO,OAAQC,IAAK,UAAWC,MAAO,uBAClJ,IAGFC,eAAe,GACf/B,iBAAiBgC,YAAY,YAC/B,EAGID,eAAkBE,IACtB7B,eAAiB6B,EACjB,MAAMC,EAAU,IAAKZ,KAAKvB,OAAOkB,KAAKgB,GAAYV,QAASE,UAC3DU,SAAWpC,OAAOkB,KAAKmB,eAAcC,GAAQ,IAAKf,KAAKe,EAAKd,QAASE,WAAaS,IAClFlC,iBAAiBgC,YAAY,CAC3BM,MAAOL,EACPM,IAAKN,EACLO,IAAKL,WAEH/B,gBAAkB+B,SACpBnC,iBAAiBgC,YAAY,WAE7BhC,iBAAiBgC,YAAY,UAC/BS,eAAeR,EAAA,EAGXQ,eAAkBrB,IACtB,MAAMD,EAAOpB,OAAOkB,KAAKG,GACnBJ,EAAO,IAAIM,KAAKH,EAAKI,QAC3BtB,YAAYyC,KAAK1B,EAAK2B,mBAAmBC,UAAUC,SAAU,CAACC,KAAM,UAAWC,OAAO,aACtF7C,YAAY8C,KAAK,MAAO,oCAAoC7B,EAAK8B,QAAQ,GAAGC,cAAa,EAGrFC,OAAS,CAAC7C,EAAKC,KACnB,MAAM6C,EAAaC,EAAE,QACrBD,EAAWJ,KAAK,MAAO,uEAAiF1C,KAAOC,KAC/G6C,EAAWE,YAAY,cAGzBD,EAAEE,UAAUC,OAAM,KAChBtD,YAAcmD,EAAE,YAChBpD,YAAcoD,EAAE,YAChBrD,iBAAmBqD,EAAE,cACrBrD,iBAAiBgC,YAAY,CAC3ByB,OAAQ,GACRC,YAAa,WACbC,aAAa,EACbrB,MAAO,EACPsB,UAAU,EACVrB,IAAK,EACLC,IAAK,EACLqB,mBAAmB,EACnBC,gBAAgB,EAChBC,OAASC,GAAMvB,eAAeuB,EAAE1B,SAGlCnC,eAAiBkD,EAAE,YACnBT,UAAUqB,YAAYC,oBAAoBC,IACxC1D,QAAQC,IAAIyD,GACZ,IAAI7D,EAAM6D,EAASC,OAAOC,SACtB9D,EAAM4D,EAASC,OAAOE,UAC1BjE,SAASC,EAAKC,GACd4C,OAAO7C,EAAKC,EAAA,GACd","sources":["scripts.js"],"sourcesContent":["// https://roundsliderui.com/document.html\nconst API_KEY=\"\";\nlet values, dateRangeElement, dateElement, iconElement, dateBarElement;\nlet startDateIndex;\n\nconst loadData = (lat, lng) => {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?id=524901&lat=${lat}&lon=${lng}&appid=ca0bc81789a77b485742ed7b77c9a1b9`;\n  console.log(url);\n  fetch(url)\n  .then((response) => response.json())\n  .then((data) => {\n    values = data;\n    var date;\n    data.list.forEach((item, index) => {\n      const currDate = new Date(item.dt_txt);\n      if (date == undefined || date.getDate() != currDate.getDate()) {\n        date = currDate;\n        dateBarElement.append(`<input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio-${date.getDate()}\" autocomplete=\"off\" onclick=\"setWeatherDate(${index})\">\n          <label class=\"btn btn-outline-primary\" for=\"btnradio-${date.getDate()}\">${date.toLocaleString('it-IT', {short: 'long', day: '2-digit', month: '2-digit'})}</label>`);\n      }\n    });\n\n    setWeatherDate(0);\n    dateRangeElement.roundSlider(\"enable\");\n  });\n}\n\nconst setWeatherDate = (startIndex) => {\n  startDateIndex = startIndex;\n  const currDay = (new Date(values.list[startIndex].dt_txt)).getDate();\n  endIndex = values.list.findLastIndex(elem => (new Date(elem.dt_txt)).getDate() == currDay);\n  dateRangeElement.roundSlider({\n    value: startIndex,\n    min: startIndex,\n    max: endIndex\n  });\n  if (startDateIndex == endIndex)\n    dateRangeElement.roundSlider(\"disable\");\n  else\n    dateRangeElement.roundSlider(\"enable\");\n  setWeatherTime(startIndex);\n}\n\nconst setWeatherTime = (index) => {\n  const item = values.list[index];\n  const date = new Date(item.dt_txt);\n  dateElement.html(date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'}));\n  iconElement.attr(\"src\", `http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`);\n}\n\nconst setMap = (lat, lng) => {\n  const mapElement = $(\"#map\");\n  mapElement.attr(\"src\", `https://www.google.com/maps/embed/v1/place?maptype=satellite&key=${API_KEY}&q=${lat},${lng}`);\n  mapElement.removeClass(\"invisible\");\n}\n\n$(document).ready(() => {\n  iconElement = $(\"#dw-icon\");\n  dateElement = $(\"#dw-date\");\n  dateRangeElement = $(\"#dateRange\");\n  dateRangeElement.roundSlider({\n    radius: 80,\n    circleShape: \"half-top\",\n    showTooltip: false,\n    value: 0,\n    disabled: true,\n    min: 0,\n    max: 7,\n    mouseScrollAction: true,\n    keyboardAction: true,\n    change: (e) => setWeatherTime(e.value)\n  });\n\n  dateBarElement = $(\"#dateBar\");\n  navigator.geolocation.getCurrentPosition((position) => {\n    console.log(position)\n    let lat = position.coords.latitude;\n    let lng = position.coords.longitude;\n    loadData(lat, lng);\n    setMap(lat, lng);\n  });\n});"],"names":["API_KEY","values","dateRangeElement","dateElement","iconElement","dateBarElement","startDateIndex","loadData","lat","lng","url","console","log","fetch","then","response","json","data","date","list","forEach","item","index","currDate","Date","dt_txt","undefined","getDate","append","toLocaleString","short","day","month","setWeatherDate","roundSlider","startIndex","currDay","endIndex","findLastIndex","elem","value","min","max","setWeatherTime","html","toLocaleTimeString","navigator","language","hour","minute","attr","weather","icon","setMap","mapElement","$","removeClass","document","ready","radius","circleShape","showTooltip","disabled","mouseScrollAction","keyboardAction","change","e","geolocation","getCurrentPosition","position","coords","latitude","longitude"],"version":3,"file":"index.3f6bce7b.js.map"}